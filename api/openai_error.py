"""Custom Errors"""

from typing import Optional


class RunTimeError(Exception):
    """
    Any error generated by RunTimeError.
    This error wraps its source transparently in such a way that its attributes
    can be accessed directly: for example, if the original error has a `message`
    attribute.
    """

    def __init__(
        self,
        message: Optional[str] = None, #this variable can be either a string or None
    ):
        super().__init__()
        if message:
            self.message = message

    def __getattr__(self, attr):
        # If self.__cause__ is None, it will raise the expected AttributeError
        getattr(self.__cause__, attr)

    # __repr__ is a used to return a string representation of an object
    def __repr__(self):
        return str(self)


class OpenAIError(RunTimeError):
    """Exception for issues that occur in the OpenAI APIs"""

    def __init__(
        self,
        message: Optional[str] = None,
        status_code: Optional[int] = None,
    ):
        super().__init__(message=message)
        self.status_code = status_code

class OpenAIConnectionError(OpenAIError):
    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message, status_code=429)

    def __repr__(self):
        return f"OpenAIConnectionError: message= {self.message}, status_code={self.status_code}"

class OpenAIRateLimitError(OpenAIError):
    """
    Rate limit error for OpenAI API (status code 429), See below:
    https://help.openai.com/en/articles/5955604-how-can-i-solve-429-too-many-requests-errors
    https://help.openai.com/en/articles/5955598-is-api-usage-subject-to-any-rate-limits
    https://github.com/openai/openai-cookbook/blob/main/examples/How_to_handle_rate_limits.ipynb
    """

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message, status_code=429)

    def __repr__(self):
        return f"OpenAIRateLimitError: message= {self.message}, status_code={self.status_code}"